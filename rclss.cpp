#include "utility.h"

#include <iostream>
#include <fstream>
#include <vector>
#include <cassert>

#include <dlib/rand.h>

constexpr const char* FILE_EXTENSION = ".dat";
typedef radial_basis_kernel<sample_type> kernel_type;

int main(int argc, char* argv[])
{
    try
    {
        if (argc != 2)
        {
          std::cerr << "first arg is <filename> of saved data\n";
          return 1;
        }

        one_vs_one_decision_function<ovo_trainer,
        decision_function<poly_kernel>,
        decision_function<rbf_kernel>
        > df;

        // load the function back in from disk and store it in df3.
        std::string filename(argv[1]);
        if(filename.find(FILE_EXTENSION) == std::string::npos)
            filename += FILE_EXTENSION;

        deserialize(filename.c_str()) >> df;

        sample_type m;
        std::string input;
        while(true)
        {
            std::getline(std::cin, input);
            if(!input.empty())
            {
                std::cout << "input data: " << input << std::endl;
                std::vector<double> parsedData = Utility::getInstance()->parse_data(input, true);
                long i = 0;
                for(const auto & element: parsedData) {
                    m(i) = element;
                    i++;
                }
                double label = df(m);
                std::vector<std::vector<std::string>> fileData;
                if(!Utility::getInstance()->read_cluster_data(label, fileData))
                {
                    std::cerr << "file for label " << label << " wasn't generated by rclst executable";
                    return 1;
                }

                Utility::getInstance()->sort_and_display_cluster_data(m(0), m(1), fileData);
            }
        }
    }
    catch (std::exception& e)
    {
        cout << "exception thrown!" << endl;
        cout << e.what() << endl;
    }
}
